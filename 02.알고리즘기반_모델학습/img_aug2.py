# -*- coding: utf-8 -*-
"""img_aug2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VkO2Nj_RXe_XE0GKQWjS4_iafzJu-PQp
"""

import numpy as np 
import imgaug as ia 
import imgaug.augmenters as iaa 

# random example images 
images = np.random.randint(0, 255, (16, 128, 128, 3), dtype=np.uint8) 

class Img_aug :
    def __init__(self) : 
        # Sometimes(0.5, ...) applies the given augmenter in 50% of all cases, 
        # e.g. Sometimes(0.5, GaussianBlur(0.3)) would blur roughly every second image. 
        self.sometimes = lambda aug: iaa.Sometimes(0.5, aug) 
        
        # Define our sequence of augmentation steps that will be applied to every image
        # All augmenters with per_channel=0.5 will sample one value _per image_ 
        # in 50% of all cases. In all other cases they will sample new values 
        # _per channel_. 
        self.seq = iaa.Sequential( 
            [ 
                iaa.Multiply((0.5, 1.5)), 
                iaa.Affine(
                    translate_px = {'x': (-30,30), 'y': (-30,30)},
                    scale = (0.5, 1),
                    rotate = (-15,15)
                ),
                iaa.Fliplr(0.5)
            ], 
            random_order=True 
        )